#!/usr/bin/env node

/**
 * Setup Script - Oracle Client Auto-Setup
 * Script de configura√ß√£o autom√°tica para n8n-nodes-oracle-database
 * 
 * @author J√¥natas Meireles Sousa Vieira
 * @version 1.0.0
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class OracleSetup {
    constructor() {
        this.projectRoot = this.findProjectRoot();
        this.scriptDir = path.join(this.projectRoot, 'script');
        this.libDir = path.join(this.projectRoot, 'lib');
    }

    findProjectRoot() {
        let currentDir = __dirname;
        while (currentDir !== path.dirname(currentDir)) {
            if (fs.existsSync(path.join(currentDir, 'package.json'))) {
                return currentDir;
            }
            currentDir = path.dirname(currentDir);
        }
        return path.resolve(__dirname, '..');
    }

    /**
     * Cria estrutura de diret√≥rios
     */
    createDirectoryStructure() {
        console.log('üìÅ Criando estrutura de diret√≥rios...');
        
        const dirs = [
            this.scriptDir,
            this.libDir,
            path.join(this.libDir, 'oracle_client'),
        ];

        for (const dir of dirs) {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`   ‚úÖ ${path.relative(this.projectRoot, dir)}/`);
            } else {
                console.log(`   üìÇ ${path.relative(this.projectRoot, dir)}/ (j√° existe)`);
            }
        }
    }

    /**
     * Verifica depend√™ncias do sistema
     */
    checkSystemDependencies() {
        console.log('üîç Verificando depend√™ncias do sistema...');
        
        const dependencies = {
            node: 'node --version',
            npm: 'npm --version',
            unzip: this.getUnzipCommand()
        };

        const results = {};

        for (const [name, command] of Object.entries(dependencies)) {
            try {
                const version = execSync(command, { 
                    encoding: 'utf8', 
                    stdio: ['pipe', 'pipe', 'pipe'] 
                }).trim();
                results[name] = { available: true, version };
                console.log(`   ‚úÖ ${name}: ${version}`);
            } catch (error) {
                results[name] = { available: false };
                console.log(`   ‚ùå ${name}: n√£o encontrado`);
            }
        }

        // Verifica√ß√µes especiais
        this.checkNodeVersion(results.node?.version);
        this.checkUnzipAvailability(results.unzip?.available);

        return results;
    }

    /**
     * Retorna comando de unzip baseado na plataforma
     */
    getUnzipCommand() {
        const platform = process.platform;
        
        if (platform === 'win32') {
            return 'powershell -Command "Get-Command Expand-Archive"';
        } else {
            return 'unzip -v';
        }
    }

    /**
     * Verifica vers√£o m√≠nima do Node.js
     */
    checkNodeVersion(version) {
        if (!version) return;

        const majorVersion = parseInt(version.replace(/^v/, '').split('.')[0]);
        const minVersion = 18;

        if (majorVersion < minVersion) {
            console.warn(`‚ö†Ô∏è Node.js ${majorVersion} detectado. Recomendado: ${minVersion}+`);
            console.warn('   Algumas funcionalidades podem n√£o estar dispon√≠veis.');
        }
    }

    /**
     * Verifica disponibilidade do unzip
     */
    checkUnzipAvailability(available) {
        if (!available) {
            const platform = process.platform;
            
            if (platform === 'linux') {
                console.warn('‚ö†Ô∏è unzip n√£o encontrado. Instale com:');
                console.warn('   Ubuntu/Debian: sudo apt-get install unzip');
                console.warn('   CentOS/RHEL: sudo yum install unzip');
            } else if (platform === 'darwin') {
                console.warn('‚ö†Ô∏è unzip n√£o encontrado. Instale com:');
                console.warn('   brew install unzip');
            } else if (platform === 'win32') {
                console.warn('‚ö†Ô∏è PowerShell Expand-Archive n√£o dispon√≠vel');
                console.warn('   Instale uma vers√£o mais recente do PowerShell');
            }
        }
    }

    /**
     * Instala depend√™ncias npm se necess√°rio
     */
    installNpmDependencies() {
        console.log('üì¶ Verificando depend√™ncias npm...');
        
        const packageJsonPath = path.join(this.projectRoot, 'package.json');
        
        if (fs.existsSync(packageJsonPath)) {
            const nodeModulesPath = path.join(this.projectRoot, 'node_modules');
            
            if (!fs.existsSync(nodeModulesPath)) {
                console.log('   Executando npm install...');
                try {
                    execSync('npm install', { 
                        cwd: this.projectRoot, 
                        stdio: 'inherit' 
                    });
                    console.log('   ‚úÖ Depend√™ncias instaladas');
                } catch (error) {
                    console.error('   ‚ùå Erro ao instalar depend√™ncias:', error.message);
                    throw error;
                }
            } else {
                console.log('   ‚úÖ node_modules j√° existe');
            }
        } else {
            console.log('   ‚ö†Ô∏è package.json n√£o encontrado, pulando...');
        }
    }

    /**
     * Configura Oracle Client
     */
    async setupOracleClient(options = {}) {
        console.log('üîß Configurando Oracle Client...');
        
        const { force = false, mode = 'auto' } = options;

        try {
            // Importa e executa detector
            const OracleClientDetector = require('./oracle-detector').OracleClientDetector;
            const detector = new OracleClientDetector();
            
            const detection = await detector.detectOracleClient();
            
            if (detection.available && !force) {
                console.log(`   ‚úÖ Oracle Client j√° dispon√≠vel (${detection.type})`);
                console.log(`   üìç Localiza√ß√£o: ${detection.libDir || 'sistema'}`);
                return detection;
            }

            // Auto-instala√ß√£o se n√£o encontrado ou for√ßado
            if (!detection.available || force) {
                console.log('   üì• Iniciando instala√ß√£o autom√°tica...');
                
                const OracleClientInstaller = require('./oracle-installer');
                const installer = new OracleClientInstaller();
                
                const result = await installer.run(force);
                console.log('   ‚úÖ Oracle Client configurado');
                
                return result;
            }

        } catch (error) {
            console.error('   ‚ùå Erro na configura√ß√£o:', error.message);
            
            if (mode === 'strict') {
                throw error;
            }
            
            console.log('   üí° Continuando com modo thin (sem Oracle Client)');
            return { available: false, mode: 'thin' };
        }
    }

    /**
     * Executa testes de valida√ß√£o
     */
    async runValidationTests() {
        console.log('üß™ Executando testes de valida√ß√£o...');
        
        try {
            // Teste 1: Importa√ß√£o do oracledb
            console.log('   Teste 1: Importando oracledb...');
            const oracledb = require('oracledb');
            console.log(`   ‚úÖ oracledb v${oracledb.versionString}`);

            // Teste 2: Detec√ß√£o do Oracle Client
            console.log('   Teste 2: Detec√ß√£o de Oracle Client...');
            const { getOracleClientConfig } = require('./oracle-detector');
            const config = await getOracleClientConfig({ autoInstall: false });
            
            console.log(`   ‚úÖ Modo: ${config.mode}`);
            if (config.libDir) {
                console.log(`   ‚úÖ LibDir: ${config.libDir}`);
            }

            // Teste 3: Conex√£o b√°sica (sem credenciais reais)
            console.log('   Teste 3: Inicializa√ß√£o do cliente...');
            
            if (config.mode === 'thick' && config.libDir) {
                try {
                    oracledb.initOracleClient({ libDir: config.libDir });
                    console.log('   ‚úÖ Cliente thick inicializado');
                } catch (error) {
                    if (error.message.includes('DPI-1072')) {
                        console.log('   ‚úÖ Cliente thick j√° inicializado');
                    } else {
                        throw error;
                    }
                }
            } else {
                console.log('   ‚úÖ Modo thin configurado');
            }

            console.log('‚úÖ Todos os testes passaram!');
            return true;

        } catch (error) {
            console.error('‚ùå Teste falhou:', error.message);
            return false;
        }
    }

    /**
     * Gera script de exemplo
     */
    generateExampleScript() {
        console.log('üìù Gerando script de exemplo...');
        
        const examplePath = path.join(this.scriptDir, 'test-connection.js');
        const exampleContent = `#!/usr/bin/env node

/**
 * Exemplo de teste de conex√£o Oracle
 * Demonstra uso do Oracle Client auto-configurado
 */

const { getOracleClientConfig } = require('./oracle-detector');

async function testOracleConnection() {
    try {
        console.log('üîç Detectando Oracle Client...');
        
        // Obt√©m configura√ß√£o autom√°tica
        const config = await getOracleClientConfig({
            autoInstall: true,
            forceThickMode: false
        });

        console.log('üìã Configura√ß√£o detectada:');
        console.log(\`   Modo: \${config.mode}\`);
        console.log(\`   Dispon√≠vel: \${config.available}\`);
        console.log(\`   Tipo: \${config.type}\`);
        if (config.libDir) {
            console.log(\`   LibDir: \${config.libDir}\`);
        }

        // Importa oracledb
        const oracledb = require('oracledb');

        // Configura cliente se necess√°rio
        if (config.mode === 'thick' && config.libDir) {
            console.log('üîß Configurando modo thick...');
            try {
                oracledb.initOracleClient({ libDir: config.libDir });
                console.log('‚úÖ Cliente thick configurado');
            } catch (error) {
                if (!error.message.includes('DPI-1072')) {
                    throw error;
                }
                console.log('‚úÖ Cliente thick j√° configurado');
            }
        }

        console.log('‚úÖ Configura√ß√£o Oracle pronta para uso!');
        console.log('');
        console.log('üí° Para testar conex√£o real, configure suas credenciais:');
        console.log('   - user: seu_usuario');
        console.log('   - password: sua_senha'); 
        console.log('   - connectionString: host:porta/servico');

    } catch (error) {
        console.error('‚ùå Erro:', error.message);
        process.exit(1);
    }
}

// Executa se chamado diretamente
if (require.main === module) {
    testOracleConnection();
}

module.exports = testOracleConnection;
`;

        fs.writeFileSync(examplePath, exampleContent);
        console.log(`   ‚úÖ Exemplo criado: ${path.relative(this.projectRoot, examplePath)}`);
    }

    /**
     * Execu√ß√£o principal
     */
    async run(options = {}) {
        console.log('üöÄ Oracle Client Setup');
        console.log('=======================\n');

        const {
            skipDependencies = false,
            skipOracle = false,
            skipTests = false,
            force = false,
            mode = 'auto'
        } = options;

        try {
            // 1. Criar estrutura de diret√≥rios
            this.createDirectoryStructure();
            console.log('');

            // 2. Verificar depend√™ncias do sistema
            if (!skipDependencies) {
                this.checkSystemDependencies();
                console.log('');
            }

            // 3. Instalar depend√™ncias npm
            if (!skipDependencies) {
                this.installNpmDependencies();
                console.log('');
            }

            // 4. Configurar Oracle Client
            if (!skipOracle) {
                await this.setupOracleClient({ force, mode });
                console.log('');
            }

            // 5. Executar testes
            if (!skipTests) {
                const testsOk = await this.runValidationTests();
                console.log('');
                
                if (!testsOk) {
                    console.log('‚ö†Ô∏è Alguns testes falharam, mas o setup pode funcionar');
                }
            }

            // 6. Gerar exemplo
            this.generateExampleScript();
            console.log('');

            // 7. Resumo final
            console.log('üéâ Setup conclu√≠do com sucesso!');
            console.log('');
            console.log('Pr√≥ximos passos:');
            console.log('1. Execute: node script/test-connection.js');
            console.log('2. Configure suas credenciais Oracle');
            console.log('3. Teste sua conex√£o no n8n');
            console.log('');
            console.log('Comandos √∫teis:');
            console.log('- node script/oracle-installer.js          # Reinstalar Oracle Client');
            console.log('- node script/oracle-installer.js --force  # For√ßar reinstala√ß√£o');
            console.log('- node script/test-connection.js           # Testar configura√ß√£o');

        } catch (error) {
            console.error('\n‚ùå Setup falhou:', error.message);
            console.error('\nüîß Tente executar com --force ou verificar logs acima');
            process.exit(1);
        }
    }
}

// CLI
if (require.main === module) {
    const args = process.argv.slice(2);
    
    const options = {
        skipDependencies: args.includes('--skip-deps'),
        skipOracle: args.includes('--skip-oracle'),
        skipTests: args.includes('--skip-tests'),
        force: args.includes('--force'),
        mode: args.includes('--strict') ? 'strict' : 'auto'
    };

    if (args.includes('--help')) {
            console.log(`
        Oracle Client Setup

        Uso:
        node setup-oracle.js [op√ß√µes]

        Op√ß√µes:
        --skip-deps     Pula verifica√ß√£o de depend√™ncias
        --skip-oracle   Pula configura√ß√£o do Oracle Client
        --skip-tests    Pula testes de valida√ß√£o
        --force         For√ßa reinstala√ß√£o do Oracle Client
        --strict        Falha se Oracle Client n√£o puder ser configurado
        --help          Exibe esta ajuda

        Exemplos:
        node setup-oracle.js                 # Setup completo
        node setup-oracle.js --force         # For√ßa reinstala√ß√£o
        node setup-oracle.js --skip-deps     # Pula verifica√ß√£o de deps
            `);
            process.exit(0);
        } 
}// Missing closing brace was here

module.exports = OracleSetup;

const setup = new OracleSetup(); // Cria inst√¢ncia
setup.run(options); // Executa o setup 